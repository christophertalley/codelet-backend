"""create all tables

Revision ID: be0d4210024a
Revises:
C
reate Date: 2020-06-08 15:32:24.353980

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime
from app.models import db, User, Set, Card


# revision identifiers, used by Alembic.
revision = 'be0d4210024a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    categories_table = op.create_table('categories',
                                       sa.Column('id', sa.Integer(),
                                                 nullable=False),
                                       sa.Column('name', sa.String(
                                           length=50), nullable=False),
                                       sa.PrimaryKeyConstraint('id'),
                                       sa.UniqueConstraint('name')
                                       )
    users_table = op.create_table('users',
                                  sa.Column('id', sa.Integer(),
                                            nullable=False),
                                  sa.Column('email', sa.String(
                                      length=50), nullable=False),
                                  sa.Column('nickname', sa.String(
                                      length=50), nullable=False),
                                  sa.PrimaryKeyConstraint('id'),
                                  sa.UniqueConstraint('email')
                                  )
    sets_table = op.create_table('sets',
                                 sa.Column('id', sa.Integer(), nullable=False),
                                 sa.Column('title', sa.String(
                                     length=51), nullable=False),
                                 sa.Column('description', sa.Text(),
                                           nullable=True),
                                 sa.Column('category_id',
                                           sa.Integer(), nullable=False),
                                 sa.Column('user_id', sa.Integer(),
                                           nullable=False),
                                 sa.Column('created_at',
                                           sa.DateTime(), nullable=True),
                                 sa.ForeignKeyConstraint(
                                     ['category_id'], ['categories.id'], ),
                                 sa.ForeignKeyConstraint(
                                     ['user_id'], ['users.id'], ),
                                 sa.PrimaryKeyConstraint('id')
                                 )
    cards_table = op.create_table('cards',
                                  sa.Column('id', sa.Integer(),
                                            nullable=False),
                                  sa.Column('term', sa.String(
                                      length=100), nullable=False),
                                  sa.Column('definition', sa.Text(),
                                            nullable=False),
                                  sa.Column('set_id', sa.Integer(),
                                            nullable=False),
                                  sa.ForeignKeyConstraint(
                                      ['set_id'], ['sets.id'], ),
                                  sa.PrimaryKeyConstraint('id')
                                  )
    favorites_table = op.create_table('favorites',
                                      sa.Column('id', sa.Integer(),
                                                nullable=False),
                                      sa.Column(
                                          'set_id', sa.Integer(), nullable=False),
                                      sa.Column(
                                          'user_id', sa.Integer(), nullable=False),
                                      sa.ForeignKeyConstraint(
                                          ['set_id'], ['sets.id'], ),
                                      sa.ForeignKeyConstraint(
                                          ['user_id'], ['users.id'], ),
                                      sa.PrimaryKeyConstraint('id')
                                      )
    votes_table = op.create_table('votes',
                                  sa.Column('id', sa.Integer(),
                                            nullable=False),
                                  sa.Column('set_id', sa.Integer(),
                                            nullable=False),
                                  sa.Column('user_id', sa.Integer(),
                                            nullable=False),
                                  sa.Column('is_upvote', sa.Boolean(),
                                            nullable=True),
                                  sa.ForeignKeyConstraint(
                                      ['set_id'], ['sets.id'], ),
                                  sa.ForeignKeyConstraint(
                                      ['user_id'], ['users.id'], ),
                                  sa.PrimaryKeyConstraint('id')

                                  )

    # Add seeder for users table
    op.bulk_insert(users_table, [
        {
            "nickname": 'Codelet App',
            "email": "codelet.app@gmail.com"
        },
        {
            "nickname": 'Demo User',
            "email": "demo@demo.com"
        },
        {
            "nickname": 'Brandon Tsui',
            "email": "brandon@brandon.com"
        },
        {
            "nickname": 'Lisa Kang',
            "email": "lisa@lisa.com"
        },
        {
            "nickname": 'Chris  Talley',
            "email": "chris@chris.com"
        },
        {
            "nickname": 'Lizzie Friedman',
            "email": "lizzie@lizzie.com.com"
        }
    ])

    # Add seeders for categories table
    op.bulk_insert(categories_table, [
        {'name': 'Data Structures'},  # 1
        {'name': 'Algorithms'},  # 2
        {'name': 'Javascript'},  # 3
        {'name': 'Python'},  # 4
        {'name': 'Databases'},  # 5
        {'name': 'Frontend'},  # 6
        {'name': 'Backend'},  # 7
        {'name': 'Other'},
    ])

    # Add seeders for sets table
    op.bulk_insert(sets_table, [
        {
            'title': 'Trees',  # 1 Chris
            'description': 'Study tree data structures!',
            'category_id': 1,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Graphs',  # 2 Lizzie
            'description': 'Learn some graph data structures.',
            'category_id': 1,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Linked Lists',  # 3 Lisa
            'description': 'Study linked lists data structures',
            'category_id': 1,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Algorithm Concepts',  # 4 Chris
            'description': 'Study some algorithm concepts.',
            'category_id': 2,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Sorting Algorithms',  # 5 Brandon âˆš
            'description': 'Learn about different sorting mechanisms.',
            'category_id': 2,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Javascript Datatypes',  # 6 Lizzie
            'description': 'Study various Javascript datatypes!',
            'category_id': 3,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Javascript Syntax',  # 7 Brandon
            'description': 'Brush up on some Javascript syntax.',
            'category_id': 3,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Python Datatypes',  # 8 Chris
            'description': 'Need a refresher on python datatypes? Start here!',
            'category_id': 4,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Python Syntax',  # 9 Lisa
            'description': 'No semi-colons here! Learn some python syntax!',
            'category_id': 4,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'SQL',  # 10 Lisa
            'description': 'Review some SQL topics!',
            'category_id': 5,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Sequelize',  # 11 Lizzie
            'description': 'Learn about Sequelize!',
            'category_id': 5,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'SQLAlchemy',  # 12 Lisa
            'description': 'Learn about SQLAlchemy!',
            'category_id': 5,
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'React',  # 13 Lisa
            'description': 'A spicy new javascript framework',
            'category_id': '6',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Vanilla JS',  # 14 Brandon
            'description': 'Good ole\' unadulterated javascript. ',
            'category_id': '6',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'HTML/CSS',  # 15 Lizzie
            'description': 'Learn about the backbones of the world wide web!',
            'category_id': '6',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Flask',  # 16Brandon
            'description': 'Dive into Flask!',
            'category_id': '7',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Node',  # 17 Chris
            'description': 'Learn about Node.js!',
            'category_id': '6',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Redux',  # 18 lizzie
            'description': 'Learn all about the wonders of Redux and how it will rock your world',
            'category_id': '7',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Web Storage',  # 19 lizzie
            'description': 'cookies for life',
            'category_id': '6',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Promises',  # 20 lizzie
            'description': 'never make a promise you cant keep...',
            'category_id': '3',
            'user_id': 1,
            'created_at': datetime.now()
        },
        {
            'title': 'Unit Testing',  # 21 lizzie
            'description': 'mocha + chai = better than any python testing framework',
            'category_id': '3',
            'user_id': 1,
            'created_at': datetime.now()
        },

    ])

    op.bulk_insert(cards_table, [
        {
            'term': 'Graphs represent _____ relationships between objects',
            'definition': 'pairwise',
            'set_id': 2
        },
        {
            'term': 'a graph is a _____ more than a collection',
            'definition': 'model',
            'set_id': 2
        },
        {
            'term': 'the four basic graph types are',
            'definition': '''1. undirected and unweighted,
                2. undirected and weighted,
                3. directed and unweighted,
                directed and weighted
                ''',
            'set_id': 2
        },
        {
            'term': 'What is adjacency',
            'definition': 'the basic connectedness property of vertices',
            'set_id': 2
        },
        {
            'term': 'WHat kind of graphs have a symmetric matrix',
            'definition': 'Undirected graphs',
            'set_id': 2
        },
        {
            'term': 'When is an index null in a directed list',
            'definition': 'When the index does not point to anything',
            'set_id': 2
        },
        {
            'term': 'Self Loop',
            'definition': 'An edge that links a vertex to itself',
            'set_id': 2
        },
        {
            'term': 'Simple Graph',
            'definition': 'A graph with no self loops',
            'set_id': 2
        },
        {
            'term': 'Directed Graphs',
            'definition': 'Paths must follow the directions of the edges',
            'set_id': 2
        },
        {
            'term': 'Simple Path',
            'definition': 'A path that does not cross the same edge twice',
            'set_id': 2
        },
        {
            'term': 'What is a cycle in a graph',
            'definition': 'It is a simple path that starts and ends at the same vertex',
            'set_id': 2
        },
        {
            'term': 'Acyclic Graph',
            'definition': 'A graph with no cycles',
            'set_id': 2
        },
        {
            'term': 'What is a variable',
            'definition': 'Container for a piece of data',
            'set_id': 6
        },
        {
            'term': 'Are variables case sensitive',
            'definition': 'Yes',
            'set_id': 6
        },
        {
            'term': 'What will an undeclared variable return',
            'definition': 'Undefined',
            'set_id': 6,
        },
        {
            'term': 'Two types of variable scope',
            'definition': 'Local and global',
            'set_id': 6,
        },
        {
            'term': 'Properties of local scope',
            'definition': 'Within a function, only available within a function',
            'set_id': 6,
        },
        {
            'term': 'Properties of Global Scope',
            'definition': 'Outside a function, available to any code outside or within that function',
            'set_id': 6,
        },
        {
            'term': 'What is variable hoisting',
            'definition': 'Variables are hoisted to the top of the function/statement',
            'set_id': 6
        },
        {
            'term': 'Prototype Based',
            'definition': 'Each object has a prototype that inherits properties and abilities from',
            'set_id': 6
        },
        {
            'term': 'Dynamic Typing',
            'definition': 'Dynamic if the type of variable is interpreted at runtime',
            'set_id': 6
        },
        {
            'term': 'First Class Function',
            'definition': 'Treats functions as first class citizens and can do things with functions everything you can do with other elements',
            'set_id': 6
        },
        {
            'term': 'Multi Paradigm Language',
            'definition': 'Supports more than one programming paradigm - devs can work with a variety of styles within js',
            'set_id': 6
        },
        {
            'term': 'DOM',
            'definition': 'Document Object Model',
            'set_id': 6
        },
        {
            'term': 'Two ways to add js to your site',
            'definition': 'Internally and externally',
            'set_id': 6
        },
        {
            'term': 'Is JS case sensitive?',
            'definition': 'yes',
            'set_id': 6,
        },
        {
            'term': 'Define a boolean',
            'definition': 'true or false',
            'set_id': 6,
        },
        {
            'term': 'Define array',
            'definition': 'Used to store multiple values in a single value',
            'set_id': 6,
        },
        {
            'term': 'Down Method',
            'definition': 'Undo what was done by the up method',
            'set_id': 11,
        },
        {
            'term': 'Limit Query',
            'definition': 'Limit the number of returned results',
            'set_id': 11
        },
        {
            'term': 'Order to query results',
            'definition': 'Order',
            'set_id': 11
        },
        {
            'term': 'Validation',
            'definition': 'Security layer that validates information before you put it in your database',
            'set_id': 11,
        },
        {
            'term': 'Not empty validation',
            'definition': 'Makes sure it isnt empty',
            'set_id': 11,
        },
        {
            'term': 'Atomic Unit',
            'definition': 'Indivisible unit',
            'set_id': 11,
        },

        {
            'term': 'What is the sequelize command used to create a database?',
            'definition': 'db:create',
            'set_id': 11
        },
        {
            'term': 'What is an associate function?',
            'definition': 'Where you define the association between two models',
            'set_id': 11
        },

        {
            'term': 'What is cascade delete?',
            'definition': 'A handy shortcut for deleting the associate records of a row your deleting',
            'set_id': 11
        },
        {
            'term': 'What does HTML stand for',
            'definition': 'hyper text markup language',
            'set_id': 15
        },
        {
            'term': '<br>',
            'definition': 'Defines a line break',
            'set_id':  15
        },
        {
            'term': 'Diff between padding and margin',
            'definition': 'Padding is on the inside and margin is on the outside',
            'set_id': 15
        },
        {
            'term': 'Absolute file path',
            'definition': 'The full url to the internet file',
            'set_id': 15
        },
        {
            'term': 'Relative File Path',
            'definition': 'Points to a file in the images folder located at the root of the current web',
            'set_id': 15
        },
        {
            'term': 'What is 10vw',
            'definition': '10% of the view port with',
            'set_id': 15
        },
        {
            'term': 'Server-sent events',
            'definition': 'Allow a web page to get updates from a server',
            'set_id': 15
        },
        {
            'term': 'What are CSS (cascading style sheets)?',
            'definition': 'It is a language for defining style for web documents',
            'set_id': 15
        },
        {
            'term': 'What is the correct HTML element for the largest heading?',
            'definition': 'An h1',
            'set_id': 15
        },

        {
            'term': 'What tag do you use to make a bulleted list?',
            'definition': 'A ul tag',
            'set_id': 15
        },
        {
            'term': 'What is the correct HTML for making a text input field?',
            'definition': '<input type = "text">',
            'set_id': 15
        },


        {
            'term': 'SQL expression language',
            'definition': 'Allows SQL statements to be written using python expressions',
            'set_id': 12
        },
        {
            'term': 'Schema/Types',
            'definition': 'Uses python objects to represent tables, columns and datatypes',
            'set_id': 12
        },
        {
            'term': 'Psychopg2',
            'definition': 'Adaptor for PostGres DB',
            'set_id': 12
        },
        {
            'term': 'What is table.columns.keys',
            'definition': 'Is similar to an associative array of all the columns of a table',
            'set_id': 12
        },
        {
            'term': 'What does a string become when you run a table in the db?',
            'definition': 'A varchar',
            'set_id': 12
        },
        {
            'term': 'How do you apply a data constrain to a table?',
            'definition': 'Using the CHECK SQL command',
            'set_id': 12
        },
        {
            'term': 'What to things SQL Alchemy is composed of?',
            'definition': '1. The engine, 2. The inspect function',
            'set_id': 12
        },
        {
            'term': 'What does importing the engine do?',
            'definition': 'Creates an engine based on the connection string',
            'set_id': 12
        },
        {
            'term': 'What are some dialects of SQLalchemy?',
            'definition': 'sqlite, mysql, postgresql, oracle, mssql',
            'set_id': 12
        },
        {
            'term': 'Are primary keys auto-incrementing?',
            'definition': 'yes',
            'set_id': 12
        },
        {
            'term': 'What is the template for connecting to the database?',
            'definition': 'dialect+driver://username:password@host:port/database',
            'set_id': 12
        },
        {
            'term': 'Name two objects that are available in browser runtimes but not in NodeJS.',
            'definition': 'Common answers include `window`, `document`, and `location`.',
            'set_id': 17
        },
        {
            'term': 'What name can be used in browser runtimes to reference the "global object"?',
            'definition': '`window`',
            'set_id': 17
        },
        {
            'term': 'Why might one choose to use async fs opposed to synchronous fs?',
            'definition': '''
                            Operations on our file system can take some time
                            because data from our hard drive must be read or
                            written. Performing these operations asynchronously
                            prevents the single thread of our JavaScript program
                            from being blocked during these operations.
                            ''',
            'set_id': 17
        },
        {
            'term': 'What is the name of the node module that allows us to perform operations on our local file system?',
            'definition': '`fs`',
            'set_id': 17
        },
        {
            'term': 'What is require used for?',
            'definition': '''
                1) Allows the built in Node modules to be used in a JS file.(http, FS)
                2) Load 3rd party Libraries created by others (Express, Sequalize).
                3) Other files we've made can be "required" into our current file.''',
            'set_id': 17
        },
        {
            'term': 'How do you require the built in FS module?',
            'definition': '''
                In a node.js file, require FS with: "const fs = require("fs")""
                Simple Example:
                "const fs = require("fs");
                fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
                    if (err) throw err;
                    console.log('Saved!');
                });"''',
            'set_id': 17
        },
        {
            'term': 'What is the name of the node module that allows us to take user input?',
            'definition': '`readline`',
            'set_id': 17
        },
        {
            'term': 'What site should be used as a documentation reference for JavaScript in browser runtimes?',
            'definition': '''MDN, Mozilla Developer Network
                            (https://developer.mozilla.org/en-US/docs/Web/JavaScript)''',
            'set_id': 17
        },
        {
            'term': 'What site should be used as a documentation reference for JavaScript in Node runtimes?',
            'definition': 'NodeJS.org (https://nodejs.org/api/)',
            'set_id': 17
        },
        {
            'term': 'Define `callback`',
            'definition': '''A function passed to another function
                            which we assume will be invoked at some point.''',
            'set_id': 17
        },
        {
            'term': 'Define `algorithms`',
            'definition': '''A process or set of rules to be followed in calculations or other problem-solving operations.''',
            'set_id': 4
        },
        {
            'term': 'How does space and time complexity relate to algorithms?',
            'definition': '''Both are essential when choosing or designing an algorithm.
                        Space complexity deals with the memory space required for the algorithm. Time complexity deals
                        with the amount of time it takes for the full algorithm to complete. Space and time complexity
                        should be considered for all data sizes and especially larger data sets. ''',
            'set_id': 4
        },
        {
            'term': 'What is the process of memoization?',
            'definition': '''
                        A technique to optimize the time complexity
                        of an algorithm by storing the results of expensive function
                        calls and returning the cached result when the same inputs
                        occur again.
        ''',
            'set_id': 4
        },
        {
            'term': 'What is the process of tabulation?',
            'definition': '''
                       A technique to optimize time  complexity of
                       an algorithm by filling out a table with elements.
        ''',
            'set_id': 4
        },
        {
            'term': 'What are the 7 most common complexity classes?',
            'definition': '''O(1) - constant
                        O(log(n)) - logarithmic
                        O(n) - linear
                        O(n * log(n)) - loglinear, linearithmic, quasilinear
                        O(n^c) - O(n^2)... - polynomial
                        O(c^n) - O(2^n)... - exponential
                        O(n!) - factorial''',
            'set_id': 4
        },
        {
            'term': 'How does bubble sort work?',
            'definition': '''
                        It manipulates the data structure by
                        swapping the position of two elements.
                        Time Complexity: O(n^2) - polynomial
                        Space Complexity: O(1) - constant
                        Bubblle sort is very inefficient, and
                        does not have many practical uses.
                        ''',
            'set_id': 4
        },
        {
            'term': 'How does selection sort work?',
            'definition': '''
                        It requires us to locate the
                        smallest value in the array.
                        Time Complexity: O(n^2) - polynomial
                        Space Complexity: O(1)
                        Due to its time complexity, selection
                        sort is not a very practical algorithm.
        ''',
            'set_id': 4
        },
        {
            'term': 'How does insertion sort work?',
            'definition': '''
                        It is a simple sorting algorithm
                        that is similar to how we sort playing cards in our hands.
                        Time Complexity: O(n^2) - polynomial
                        Space Complexity: O(1)
                        Insertion sort works well with streaming data,
                        because it can sort data as it comes in.
        ''',
            'set_id': 4
        },
        {
            'term': 'How does merge sort work?',
            'definition': '''
                        It is a classic example of a "Divide and Conquer"
                        algorithm. In other words, we keep breaking the array into
                        smaller and smaller sub arrays.
                        Time complexity: O(n log(n)) - logarithm
                        Space Complexity: O(n) - linear
                        Merge sort is one of the fastest algorithms we can use
                        on an unknown dataset. However, the space being linear
                        can cause issues with larger datasets.
        ''',
            'set_id': 4
        },
        {
            'term': 'Insertion Sort',
            'definition': 'Sorts a list by placing each element in the position it should be in and gradually adding more elements one by one., A sort in which each item in a set is inserted into its proper position in the sorted set according to a specified criterion.',
            'set_id': 5
        },
        {
            'term': 'Selection Sort',
            'definition': '''
                        Sorts a list by searching for the 1st element, then the 2nd, and so on until all the elements are in place., A sort in which the items in a set are examined to find an item that fits specified criteria. This item is appended to the sorted set and removed from further consideration, and the process is repeated until all items are in the sorted set.''',
            'set_id': 5
        },
        {
            'term': 'Bubble Sort',
            'definition': '''
                            A sort in which the first two items to be sorted are examined and exchanged if necessary to place them in the specified order; the second item is then compared with the third (exchanging them if required), the third is compared with the fourth, and the process is repeated until all pairs have been examined and all items are in the proper sequence.''',
            'set_id': 5
        },
        {
            'term': 'Quicksort',
            'definition': 'A sort in which a list is first partitioned into lower and upper sublists for which all keys are, respectively, less than some pivot key or greater than the pivot key. See also the definitions for "bubble sort", "selection sort" and "insertion sort".',
            'set_id': 5
        },
        {
            'term': 'Mergesort',
            'definition': '''
                            Splits the list into sub-lists and then reconstructs the original list.''',
            'set_id': 5
        },
        {
            'term': 'Heap Sort',
            'definition': '''
                            This algorithm is based on the heap data structure, and is a more efficient version of selection sort. It determines the largest element. Then, it places that element at the end (or beginning) of the list, and then repeats the process with the rest of the list Recall that in a heap, the top element of the heap is always "next" in order (either the next highest or next lowest, in the case of numbers). If you were to take all of your input values and store them in a heap, and remove one element at a time, the elements will be removed in sorted order. Depending on the data list being sorted, this could have performance consequences. Heap sort is considered an "instable" sort because it doesn't preserve the original order of equal elements.''',
            'set_id': 5
        },
        {
            'term': 'Stable Sort',
            'definition': '''
                            Any sort method that does not change the order of equal-rank elements.
                            ''',
            'set_id': 5
        },
        {
            'term': 'Comparison sort',
            'definition': 'A sort that ranks items by comparing them to each other. As opposed to a sort that uses some other method, like the radix sort that analyzes the bits of each number.',
            'set_id': 5
        },
        {
            'term': 'Insertion sort time complexity',
            'definition': 'O(n^2) worst case, O(n) best case',
            'set_id': 5
        },
        {
            'term': 'Heap sort time complexity',
            'definition': 'O(n log n) in all cases',
            'set_id': 5
        },
        {
            'term': 'Quicksort time complexity',
            'definition': 'O(n^2) in the very unlikely worst case, O(n log n) in other cases',
            'set_id': 5
        },
        {
            'term': 'Selection sort time complexity',
            'definition': 'O(n ^ 2) in all cases',
            'set_id': 5
        },
        {
            'term': 'Bubble sort time complexity',
            'definition': 'O(n^2) worst case, O(n) best case',
            'set_id': 5
        },
        {
            'term': 'Merge sort time complexity',
            'definition': 'O(n log n) in all cases',
            'set_id': 5
        },
        {
            'term': 'True',
            'definition': 'A constant representing the true value of the boolean type.',
            'set_id': 8
        },
        {
            'term': 'False',
            'definition': 'A constant representing the false value of the boolean type.',
            'set_id': 8
        },

        {
            'term': 'None',
            'definition': 'A constant frequently used to represent the absence of a value, as when default arguments are not passed to a function.',
            'set_id': 8
        },
        {
            'term': 'strings',
            'definition': 'A string literal, or string, holds any combination of letters and numbers you would like it to hold. Any number it holds, however, is not treated like a numerical value but is preserved as if it were a word.',
            'set_id': 8
        },
        {
            'term': 'integers',
            'definition': 'An integer in Python, also known as a \'numeric literal\', is simply a name used for a numeric value. For this reason, these values are commonly called integers even if they are assigned the value of a real number in the form of an integer and a decimal value.',
            'set_id': 8
        },

        {
            'term': 'floating point number',
            'definition': '''A real number (that is, a number that can contain a fractional part).

                To convert a number into floating point:
                >> a = 1
                >> b = float(a)
                1.0''',
            'set_id': 8
        },

        {
            'term': 'lists',
            'definition': '''A list is a series of values. In Python, these values are assigned by placing them within square braces and separating them by commas like this:
                            < name of list > = [ < value > , < value > , < value > ]
                            girls=['sugar', 'spice', 'everything nice']
                            To access a part of a list, one uses the same kind of phrase as one used for a string literal:
                            < name of list > [< index number > ]
                            ''',
            'set_id': 8
        },
        {
            'term': 'tuple',
            'definition': '''It can be thought of as read-only lists. One can index, slice and concatenate, but one cannot append or alter the values of the tuple after it has been initialized.
                                directions=('north', 'south', 'east', 'west')
                            ''',
            'set_id': 8
        },

        {
            'term': 'dictionary',
            'definition': '''
                     Python term for an associative array. An array is, like a list, a series of values in two dimensions. An associative array gives one a way of accessing the values by a key, a term associated with the value instead of an item's index number.

                        These are similar to hashes in Ruby.

                        my_dictionary={"author": "Andrew Melville",
                        "title": "Moby Dick",
                        "year": "1851",
                        "copies": 5000000
                        }

                        One accesses a dictionary member by its key:

                        >> > a=my_dictionary["author"]
                        >> > print a
                        Andrew Melville
                        ''',
            'set_id': 8
        },

        {
            'term': 'complex number',
            'definition': '''
        They have a real and imaginary part, which are each a floating point number.

        >> a=1
        >> b=complex(a)
        (1+0j)''',
            'set_id': 8
        },
        {
            'term': 'long number',
            'definition': '''
        They have unlimited precision.

        >> a=1
        >> b=long(a)
        1L

        Long numbers also take up a lot of processing power.''',
            'set_id': 8
        },

        {
            'term': 'What is the difference between an element and an attribute?',
            'definition': '''An element in HTML represents some kind of structure or semantics and
        generally consists of a start tag, content, and an end tag.
        An attribute defines a property for an element, consists of an attribute/value pair, and appears within the element's start tag. An element's start tag may contain any number of space separated attribute/value pairs.''',
            'set_id': 14
        },
        {
            'term': 'What are at least two different ways to select a div with the ID of"container"in vanilla JavaScript?',
            'definition': 'Documentâ€‹.getâ€‹Elementâ€‹ById() Documentâ€‹.queryâ€‹Selector()',
            'set_id': 14
        },
        {
            'term': 'What is the difference between an ID and a class?',
            'definition': '''In the CSS, a class selector is a name preceded by a full stop(".") and an ID selector is a name preceded by a hash character("#").

         ID can be used to identify one element, whereas a class can be used to identify more than one.''',
            'set_id': 14
        },

        {
            'term': 'Describe specificity in CSS and give examples.',
            'definition': '''is the means by which browsers decide which CSS property values are the most relevant to an element.

                If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.


                Inline styles - An inline style is attached directly to the element to be styled. Example: < h1 style="color: #ffffff;" > .

                # navbar.
                IDs - An ID is a unique identifier for the page elements, such as

                Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as:hover, :focus etc.

                Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.''',
            'set_id': 14
        },
        {
            'term': 'What is event delegation and when would you use it?',
            'definition': '''strategy we can use to optimize the web apps when responding to user events.

                add the event listener to the parent, when the evet target is clicked, which will trigger the parent event listener, and find the event which is triggered.

                event.target identifies the HTML elements on which the event occurred. and we also know what element we want to listen for.

                event bubbling/propagation: it means when the user makes a click it ripples up all the way up to the top of the DOM and triggers clicks events on all the parent elements of the event you clicked.

                **Because of event bubbling you can place an event listener on a single parent HTML element that lives above a HTML child, and that event listener will get executed whenever an event occurs on any of its child nodes â€” even if these node children are added to the page after the initial load!

                Whenever a user makes a click it ripples up all the way up to the top of the DOM and triggers clicks events on all the parent elements of the element you clicked.

                Why:
                    Without event delegation you would have to rebind the click event listener to each new input loaded to the page. Coding this is complicated and burdensome.''',
            'set_id': 14
        },
        {
            'term': 'What does e.preventDefault()do?What is event bubbling?',
            'definition': '''The method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.

                - Clicking on a "Submit" button, prevent it from submitting a form
                - Clicking on a link, prevent the link from following the URL


                event bubbling/propagation: it means when the user makes a click it ripples up all the way up to the top of the DOM and triggers clicks events on all the parent elements of the event you clicked.

                **Because of event bubbling you can place an event listener on a single parent HTML element that lives above a HTML child, and that event listener will get executed whenever an event occurs on any of its child nodes â€” even if these node children are added to the page after the initial load!''',
            'set_id': 14
        },
        {
            'term': 'AJAX',
            'definition': 'A technique for creating seamless interactive websites via asynchronous data exchange between client and server. Ajax facilitates communication with the server via partial page updates instead of the traditional full-page refresh.',
            'set_id': 14
        },
        {
            'term': 'AMD',
            'definition': '''
            A standard defining how to load JavaScript libraries or modules asynchronously

            and stands for Asynchronous Module Definition. It is an alternative to CommonJS(CJS) specification.

            The API specifies a mechanism for defining modules such that the module and its dependencies can be asynchronously loaded. This is particularly well suited for the browser environment where synchronous loading of modules incurs performance, usability, debugging, and cross-domain access problems.''',
            'set_id': 14
        },
        {
            'term': 'What is the DOM?',
            'definition': '''
                DOM(for Document Object Model) is a platform - and language-neutral interface that will allow programs and scripts to dynamically access and update the content, structure and style of documents. The document can be further processed and the results of that processing can be incorporated back into the presented page. This is an overview of DOM-related materials here at W3C and around the web.''',
            'set_id': 14
        },
        {
            'term': 'Flask is a',
            'definition': 'micro framework for Python web development',
            'set_id': 16
        },
        {
            'term': 'Flask is a micro framework because',
            'definition': 'it implements only core functionality (including routing) but leaves more advanced functionality (including authentication and database ORMs) to extensions',
            'set_id': 16
        },
        {
            'term': 'app = Flask(__name__)',
            'definition': '''
            creates an instance of the Flask object using our module's name as a parameter''',
            'set_id': 16
        },
        {
            'term': '@app.route("/")',
            'definition': '''
                            means that the function directly below it should be called whenever a user visits the main root page of our web application
                        ''',
            'set_id': 16
        },
        {
            'term': 'How do you collect data from a URL parameter using Flask?',
            'definition': '''You can specify the variable in the app.route and then use that variable as a paramater in the routing function. Here is an example of the pretzel:

                            ```py
                            @ app.route('/foods/<food>')
                            def grocery(food):
                            x=food
                            ```''',
            'set_id': 16
        },
        {
            'term': 'How do you collect data from the query string using Flask?',
            'definition': '''
                            With a query string the data can be found in the request.args dictionary:

                            ```py
                            @ app.route('/foods')
                            def grocery():
                            x=request.args.get('type')
                            ```''',
            'set_id': 16
        },
        {
            'term': 'How do you collect data from the body of the request using Flask?',
            'definition': '''You can get the data form a post request in the body using the request.form dictionary

                        ```py
                        @ app.route('/foods')
                        def grocery():
                        x=request.form.get('type')
                        ```''',
            'set_id': 16
        },
        {
            'term': 'What is the session object in Flask?',
            'definition': 'It is built off of using cookies. It allows the server to set many different things in the in the session for the client to remember wihout having to create many different cookies and just have one session. It is also encoded so that someone can\'t change session data on the client before sending it to the server.',
            'set_id': 16
        },
        {
            'term': 'What exactly does Flask\'s \`jsonify()\` do?',
            'definition': 'It will take JSON serializeable data in python and convert it to a JSON string.',
            'set_id': 16
        },
        {
            'term': 'What is the difference between authorization and authentication?',
            'definition': 'Authentication refers to the process of verifying who you are whereas authorization is the process of verifying that you have access to something. For example, you can authenticate someones login and then make sure they have access to their profile by authorization.',
            'set_id': 16
        },
        {
            'term': 'What is a tree?',
            'definition': '''
                        A graph that does not contain any cycles.
                        A cycle is is defined as a path through edges that
                        begins and ends at the same node. A tree will always
                        have a root node
        ''',
            'set_id': 1
        },
        {
            'term': 'What is a binary tree?',
            'definition': '''
                        A tree where each node has at most
                        two children.
        ''',
            'set_id': 1
        },
        {
            'term': 'What is a leaf node?',
            'definition': 'A node that doesn\'t have children.',
            'set_id': 1
        },
        {
            'term': 'What is a root node?',
            'definition': '''
                        The ultimate parent, the single node of a tree that
                         can access every other node through edges; by definition
                          the root will not have a parent.
        ''',
            'set_id': 1
        },
        {
            'term': 'What is an internal node?',
            'definition': 'A node that has children.',
            'set_id': 1
        },
        {
            'term': 'How does a breadth-first search traverse a tree?',
            'definition': '''
                        Trees are traversed level-by-level, where you visit
                        every node on a level before going to a lower level. This
                        search is referred to as breadth-first search (BFS),
                        as the search tree is broadened as much as possible
                        on each depth before going to the next depth.
        ''',
            'set_id': 1
        },
        {
            'term': 'How does a depth-first search traverse a tree?',
            'definition': '''
                        Trees are traversed as deep as possible on each child
                        before going to the next sibling, thus the name `DFS`.
        ''',
            'set_id': 1
        },
        {
            'term': 'At most, how many children can each node have in a ternary tree? N-ary tree?',
            'definition': 'They have at most 3 children. N-ary trees have at most n children.',
            'set_id': 1
        },
        {
            'term': 'How do binary search trees differ from binary trees?',
            'definition': '''
                        It is a search tree with the additional added criteria:
                        - Given any node of the BST, the values in the left subtree must all be
                        strictly less than the given node's value.
                        - Given the same node of the BST, the values in the right subtree must all
                        be greater than or equal to the given node's value.
        ''',
            'set_id': 1
        },
        {
            'term': 'Explain what makes a binary tree full, complete, or perfect.',
            'definition': '''
                        Full Binary Tree - each node has exactly 0 or 2 children.
                        Complete Binary Tree - all levels except the last one are full with nodes.
                        Perfect Binary Tree - all levels (including the last one) are full of nodes.
                        ''',
            'set_id': 1
        },
        {
            'term': 'What are the different ways to write a string literal in JS?',
            'definition': '`string`, "string", \'string\'',
            'set_id': 7
        },
        {
            'term': 'What are the diffent ways to write a variable in JS?',
            'definition': '''
                        const variable =...;
                        let variable =...;
                        var variable =...;
                        ''',
            'set_id': 7
        },
        {
            'term': 'What are the different ways to write a function in JS?',
            'definition': '''
                        function foo(params) {return}
                        const foo = function(params) {return}
                        const foo = (params) => return
        ''',
            'set_id': 7
        },
        {
            'term': 'How would you invoke the function foo in JS?',
            'definition': 'foo(args);',
            'set_id': 7
        },
        {
            'term': 'How do you write an object literal in JS?',
            'definition': '''const obj = {
                            "property1":value1,
                            "property2":value2,
                            "key": value3
                            };
                    ''',
            'set_id': 7
        },
        {
            'term': 'How do you write an array literal in JS?',
            'definition': 'const arr = [v1, v2, ..., vn]; ',
            'set_id': 7
        },
        {
            'term': 'What are the different error types in JS?',
            'definition': '''
                        EvalError
                        InternalError
                        RangeError
                        ReferenceError
                        SyntaxError
                        TypeError
                        URIError
        ''',
            'set_id': 7
        },
        {
            'term': 'How would you select a DOM element with an id of "bar" in JS?',
            'definition': 'const barEle = document.getElementById("bar");',
            'set_id': 7
        },
        {
            'term': 'How can you insert values into an array from an array without directly inserting each value?',
            'definition': '''
                        const arr1 = [3, 4, 5];
                        const arr2 = [1, 2, ...vals];
                        console.log(arr2) // => [1, 2, 3, 4, 5]
                        ''',
            'set_id': 7
        },
        {
            'term': 'What values are considered falsey in JS?',
            'definition': '0, 0n, null, undefined, false, NaN, ""',
            'set_id': 7
        },
        {
            'term': 'Singly Linked List Node',
            'definition': '''Represents a single item in a linked list. Contains a value and a
                    reference to the next node.''',
            'set_id': 3
        },
        {
            'term': 'Head',
            'definition': '''Part of a linked list that points to the first node
                if that list isn't empty.''',
            'set_id': 3
        },
        {
            'term': 'Empty List',
            'definition': '''Will have no nodes so can be checked by checking
                    the node count. Note that Head and Tail should also be null as
                    there are no nodes to point to.''',
            'set_id': 3
        },
        {
            'term': 'Cheap Linked List Operations',
            'definition': '''It is common to AddToHead, AddToTail, RemoveFromHead
                    (all O(1)) and Enumerate (which can be used to Find) which is O(n).
                    Note that RemoveFromTail is O(1) if used on a doubly linked list.''',
            'set_id': 3
        },
        {
            'term': 'Expensive Linked List Operations',
            'definition': '''It is often possible to perform more expensive operations O(n)
                    on a linked list such as RemoveItem(value), RemoveFromTail and
                    Contains(value). Note that RemoveFromTail is O(1) if used on a
                    doubly linked list.''',
            'set_id': 3
        },
        {
            'term': 'List.AddToHead algorithm',
            'definition': '''With the new node, assigns 'Next' to point to the current
                    head of the list if it exists, otherwise set it to null. Assign
                    the list head to reference the new node. If the list is empty,
                    assign the tail to new node. Increment the node count. O(1)''',
            'set_id': 3
        },
        {
            'term': 'List.RemoveFromHead algorithm',
            'definition': '''If the list isn't empty, assign the head pointer to its
                    node->next pointer (so it points to the next node or null).
                    Decrement the count, if it is 0 set the tail to null. O(1)''',
            'set_id': 3
        },
        {
            'term': 'List.Enumerate algorithm',
            'definition': '''Create a temporary 'Current' node reference, set it to the
                    head of the list; while ( Current != null) { Current = Current->Next; }.
                    This walks over every node that exists in the list.''',
            'set_id': 3
        },
        {
            'term': 'List.RemoveItem(value)',
            'definition': '''Enumerate the list, keeping a reference to the previous node;
                    if the value of the current node matches the value we'd like
                    to remove then update the previous node->next to current->next.''',
            'set_id': 3
        },
        {
            'term': 'Orphan Node',
            'definition': '''Used to describe a node that has been removed from a collection
                    and so has no references.''',
            'set_id': 3
        },
        {
            'term': 'When to use a linked list',
            'definition': '''They are useful for stacks and queues due to their ability
                    to resize cheaply (depending on whether memory has to be allocated...
                    recycling nodes would be more efficient). Lists are also quite malleable,
                    allowing the easy insertion of items without having to shift existing data,
                    this could be handy for things like merge or quick sort. "Dynamic".''',
            'set_id': 3
        },
        {
            'term': 'When not to use a linked list',
            'definition': '''If an algorithm requires lots of lookups then an array (indexes)
                    or dictionary (keys) are likely to be much more efficient. If you
                    don't want the collection to grow or to allocate further memory
                    (e.g. per-node), then it might be worth considering an array or
                    something else with a fixed size, especially if data doesn't need
                    to be sorted, added or removed.''',
            'set_id': 3
        },
        {
            'term': 'What signifies the end of a linked list?',
            'definition': 'null',
            'set_id': 3
        },
        {
            'term': 'Whitespace',
            'definition': '''Used to structure code. This also means right space, and if
                    this is off, an indentation error will be displayed.''',
            'set_id': 9
        },
        {
            'term': 'Single-line Comments',
            'definition': 'Use # to comment.',
            'set_id': 9
        },
        {
            'term': 'Multi-line Comments',
            'definition': 'Use triple quotation marks """',
            'set_id': 9
        },
        {
            'term': 'Exponentiation',
            'definition': 'Use **. (2**3 = 8)',
            'set_id': 9
        },
        {
            'term': 'Len()',
            'definition': '''A type of string method used to measure the length or number
                    of characters in a string.''',
            'set_id': 9
        },
        {
            'term': 'Lower()',
            'definition': 'Gets rid of all the capitalization in a string.',
            'set_id': 9
        },
        {
            'term': 'Upper()',
            'definition': 'Makes a string completely uppercase.',
            'set_id': 9
        },
        {
            'term': 'str()',
            'definition': 'Turns non-string into strings.',
            'set_id': 9
        },
        {
            'term': 'Print',
            'definition': 'Command that displays code onto the console.',
            'set_id': 9
        },
        {
            'term': '=',
            'definition': 'Used to define variables',
            'set_id': 9
        },
        {
            'term': 'fruit[:3]',
            'definition': '''Starts at beginning of string "fruit", gives the first three
                    characters, up to but not including the index of 3.''',
            'set_id': 9
        },
        {
            'term': 'max()',
            'definition': 'This returns the greatest element in a list.',
            'set_id': 9
        },
        {
            'term': 'min()',
            'definition': 'This returns the smallest element in a list.',
            'set_id': 9
        },
        {
            'term': 'append()',
            'definition': 'This adds a new value to the end of a list.',
            'set_id': 9
        },
        {
            'term': 'Sum',
            'definition': 'Returns the sum of the numeric values in a given column',
            'set_id': 10
        },
        {
            'term': 'Max',
            'definition': 'Returns the largest value in a given column',
            'set_id': 10
        },
        {
            'term': 'Min',
            'definition': 'Returns the smallest value in a given column.',
            'set_id': 10
        },
        {
            'term': 'Avg',
            'definition': 'Returns the average value of a given column',
            'set_id': 10
        },
        {
            'term': 'Count',
            'definition': 'Returns the total number of values in a given column',
            'set_id': 10
        },
        {
            'term': 'Count (*)',
            'definition': 'Returns the number of rows in a table',
            'set_id': 10
        },
        {
            'term': 'Column',
            'definition': '''Database tables are made of different columns (fields)
                    corresponding to the attributes of the object described by
                    the table.''',
            'set_id': 10
        },
        {
            'term': 'CREATE TABLE',
            'definition': 'Used to create a new table',
            'set_id': 10
        },
        {
            'term': 'Insert',
            'definition': 'Command used to add a new record to a table within a database',
            'set_id': 10
        },
        {
            'term': 'ORDER BY',
            'definition': '''Clause used to sort the data in ascending or descending order,
                    based on one or more columns''',
            'set_id': 10
        },
        {
            'term': 'PRIMARY KEY',
            'definition': '''Constraint that uniquely identifies each record in a database
                    table; must contain unique values; should be included in most
                    tables''',
            'set_id': 10
        },
        {
            'term': 'Query',
            'definition': '''The main way to make a request for information from a database;
                    consist of questions presented to the database in a predefined format.''',
            'set_id': 10
        },
        {
            'term': 'How does React connect with Browser DOM elements?',
            'definition': '''It uses objects called "React elements" to represent the HTML
                    elements of the DOM. Developers can also create custom elements called
                    "Components" to represent the larger parts of the UI.''',
            'set_id': 13
        },
        {
            'term': 'JSX',
            'definition': '''This is an HTML-like syntax extension for JavaScript written
                    to be used with React. This is specifically how React adds XML
                    syntax to JavaScript which is compiled to JavaScript at runtime.''',
            'set_id': 13
        },
        {
            'term': 'JSX element',
            'definition': '''A basic unit of JSX found in a JavaScript file which is treated
                    as, and has the functionality of, a JavaScript expression.
                    It can also have attributes, just like HTML elements.''',
            'set_id': 13
        },
        {
            'term': 'A component changes its state by calling the function',
            'definition': 'this.setState( { someKey: newValue} )',
            'set_id': 13
        },
        {
            'term': 'The compiler transforms every JSX element into this method',
            'definition': 'React.createElement()',
            'set_id': 13
        },
        {
            'term': 'Components',
            'definition': 'React applications are made out of these.',
            'set_id': 13
        },
        {
            'term': 'Two ways for a component to get dynamic information:',
            'definition': 'props and state',
            'set_id': 13
        },
        {
            'term': 'How do you pass a prop?',
            'definition': 'By giving an attribute to a component instance',
            'set_id': 13
        },
        {
            'term': 'State',
            'definition': 'Data in our application that can change',
            'set_id': 13
        },
        {
            'term': 'Props',
            'definition': 'Information that gets passed from one component to another',
            'set_id': 13
        },
        {
            'term': 'Is redux predictable?',
            'definition': 'Yes. Interacting with the data in the store repeatedly will produce the same effect',
            'set_id': 18
        },
        {
            'term': '3 main principles of redux',
            'definition': '''
            1. A single source of truth
            2. State is read only
            3. Changes are made with pure functions
            ''',
            'set_id': 18
        },
        {
            'term': 'Explain "a single source of truth"',
            'definition': 'The state for the entire redux app is stored in a single pojo',
            'set_id': 18
        },
        {
            'term': 'Explain "State is read only"',
            'definition': 'State object cannot directly be modified; it can only be modified bt dispatching actions',
            'set_id': 18
        },
        {
            'term': 'Explain "Changes are made using pure functions"',
            'definition': 'pure functions are the reducers, which receive and update the old state and the action',
            'set_id': 18
        },
        {
            'term': 'Briefly explain state',
            'definition': 'The state of a program refers to akk the info stored by that program at a specific point in time, generally data',
            'set_id': 18
        },
        {
            'term': 'Briefly explain what a store is',
            'definition': 'A single POJO with a few other methods, including getState, dispatch(action) and subscribe(listener)',
            'set_id': 18
        },
        {
            'term': 'Action',
            'definition': 'A POJO that has a type property, and contains info that can be used to update the store, ie dispatched',
            'set_id': 18
        },
        {
            'term': 'Pure Function',
            'definition': 'Its behavior does not rely on anythng other than taking in arguments and returning a value',
            'set_id': 18
        },
        {
            'term': 'Reducer',
            'definition': 'Function that is called every time an action is dispatched. It receives an action plus the current state as the arguments, returns the updated state',
            'set_id': 18
        },
        {
            'term': 'Are reducers required to be pure functions?',
            'definition': 'Yes.They must be pure functions of the dispatched action and the current state.',
            'set_id': 18
        },
        {
            'term': 'Middleware',
            'definition': 'This is an optional component of redux that allows custom responses to dispatched actions',
            'set_id': 18
        },
        {
            'term': 'Thunks',
            'definition': 'An alternative to middleware, they essentially act as a function that calls another function',
            'set_id': 18
        },
        {
            'term': 'WHat is Flux?',
            'definition': 'A front end app architecture from FB that provides unidirectional flow; a pattern you use to structure the app',
            'set_id': 18
        },
        {
            'term': 'What are the 3 main things a redux store is responsible for?',
            'definition': '''
                1. Using a reducer to update an app's state
                2. Using subscription to broadcast an app's state
                3. Actions - using them to tell it how and when it needs to change the global
                     state of the application
            ''',
            'set_id': 18
        },
        {
            'term': 'What are the 3 main store methods?',
            'definition': '''
                1. getState() = returns the current state of a store
                2. dispatch(action) = passes an action into the reducer that tells it what info it must update
                3. subscribe(callback) = registers cbs to go off whenever the store updates. It returns a function that when
                    invoked, it unsubscribes the cb from the store
            ''',
            'set_id': 18
        },
        {
            'term': 'What 3 steps does a reducer perform?',
            'definition': '''
                1. It receives the current state plus an action
                2. It then updates the state based on the action.type
                3. finally, it returns the next state
            ''',
            'set_id': 18
        },
        {
            'term': 'Briefly desccribe cookies',
            'definition': '''
                A really small file stored on the user's computer, a cookie holds a small amount of data.
                Its included in HTTP requests - the server sends the data to the browser
                where it gets stored, and its sent back to the server with the next request
            ''',
            'set_id': 19
        },
        {
            'term': 'What are a few things a cookie can store?',
            'definition': '''
                To store stateful information about a user:
                    examples:
                        a. browser history
                        b. form input information they filled out
                        c. storing a session cookie / user login/validation
                        d. persistant cookies can have an expiration date
            ''',
            'set_id': 19
        },
        {
            'term': 'Web Storage API',
            'definition': ' Local Storage & Session Storage',
            'set_id': 19
        },
        {
            'term': 'Session Storage',
            'definition': '''
                1. Stores data for only one session or  until the browser or a tab is closed.
                2. NEVER transfers data to the server
                3. The storage limit is significantly larger than a cookie (5mb)
            ''',
            'set_id': 19
        },
        {
            'term': 'Local Storage',
            'definition': '''
                1. Stores the data with no expiry date
                2. Deleted when the browser cache is cleared
                3. Has a max storage limit in the browser
            ''',
            'set_id': 19
        },
        {
            'term': 'What is JSON',
            'definition': 'A format - it is just a string of text',
            'set_id': 19
        },
        {
            'term': 'Two important built in javascript JSON object methods',
            'definition': '''
                1. JSON.stringify(value) = turns the passed value into a string
                2. JSON.parse(str) = turns a JSON formatted string into a javascript object
            ''',
            'set_id': 19
        },
        {
            'term': 'Which method will serialize a JS value into a JSON string?',
            'definition': 'JSON.stringify()',
            'set_id': 19
        },
        {
            'term': 'Define serialize',
            'definition': 'To serialize means to convert data into a format that can be sent to another computer',
            'set_id': 19
        },
        {
            'term': 'Define deserialize',
            'definition': 'Converting a message from another computer into useable data ',
            'set_id': 19
        },
        {
            'term': 'Promise',
            'definition': 'A promise that at some future point, your code will get a value from an operation so you dont get an error',
            'set_id': 20
        },
        {
            'term': 'Three Existing States of a Promise',
            'definition': 'Pending, Fulfilled, Rejected',
            'set_id': 20
        },
        {
            'term': 'Pending Promise',
            'definition': 'The promise object hasnt been resolved. Once it does, it becomes either fullfilled or rejected',
            'set_id': 20
        },
        {
            'term': 'Fullfilled Promise',
            'definition': 'Whatever was pending had succeeded - the success handler is called and now the promise cant transition to another state or change its value',
            'set_id': 20
        },
        {
            'term': 'Rejected Promise',
            'definition': 'The operation the pending promise was sup to do failed, and now your error handler is called. The promise cant transition state, nor error reason ',
            'set_id': 20
        },
        {
            'term': 'Success Handler ',
            'definition': 'A function with one param, which is the value the fullfilled promise has',
            'set_id': 20
        },
        {
            'term': 'Error Handler',
            'definition': 'A function with one param, which is the reason that the promise failed',
            'set_id': 20
        },
        {
            'term': 'What can you use to replace .then',
            'definition': 'Using async-await',
            'set_id': 20
        },
        {
            'term': 'What happens when you declare a function as async',
            'definition': 'Causes the function to return an implicit promise containing the result',
            'set_id': 20
        },
        {
            'term': 'What does "await" do?',
            'definition': 'Used to wait for a promise to be fullfilled and can ONLY be used inside an async function',
            'set_id': 20
        },
        {
            'term': 'Does async/await code look synchronous?',
            'definition': 'Yes! You also dont have to chain .then everywhere and look super messy. Async await is the BOMB',
            'set_id': 20
        },
        {
            'term': 'What kind of error handling does async.await use?',
            'definition': 'Try / Catch blocks',
            'set_id': 20
        },
        {
            'term': 'What are two basic reasons for testing?',
            'definition': '''To make sure your code works, for increased flexibility and to reduce fear of code/boost confidence
                to make it easier to collaberate, and act as documentation for the codebase.
                ''',
            'set_id': 21
        },
        {
            'term': 'Mocha ',
            'definition': 'A javascript testing framework that runs tests AND shows them in a nice, user friendly way',
            'set_id': 21
        },
        {
            'term': '3 levels of the testing pyramid ',
            'definition': '1. Unit Tests 2. Integration Tests 3. End to End Tests (E2E)',
            'set_id': 21
        },
        {
            'term': 'Bottom 1 - Unit Tests ',
            'definition': 'Smallest unit of testing, used to test little bit of isolated code & should ONLY focus on ONE thing',
            'set_id': 21
        },
        {
            'term': 'Middle 2 - Integeration Tests ',
            'definition': 'Tests the interaction between the pieces you tested in isolation, making sure they work together',
            'set_id': 21
        },
        {
            'term': 'Top Tier - End to End Tests ',
            'definition': 'Highest level of testing, this is when you are testing the entire app',
            'set_id': 21
        },
        {
            'term': 'TDD ',
            'definition': 'Dictates that tests, not application code should be written first',
            'set_id': 21
        },
        {
            'term': 'Why use TDD?',
            'definition': 'Code written to pass pre-written specs are guaranteed to be testable and it makes it easier for other people to add new code while making sure they are not breaking anything',
            'set_id': 21
        },
        {
            'term': '4 Brief reasons TDD is the way to go (i disagree but no one asked for my opinion sadly) ',
            'definition': '''1. Writing tests before writing code means you can make sure the code you are writing works as you are writing it
                2. Only required code is written - you will not have any extra unnecessary functionality or code
                3. TDD helps focus on modularity aka breaking down the application in small, testable chunks
                4. You have a better understanding of the functionality of the code you are going to write, before you do
            ''',
            'set_id': 21
        },
        {
            'term': '3 steps of TDD workflow ',
            'definition': 'red - green - refactor = all in a continuous loop ',
            'set_id': 21
        },
        {
            'term': 'TDD - red ',
            'definition': 'Write tests that are going to fail',
            'set_id': 21
        },
        {
            'term': 'TDD-green ',
            'definition': 'Minimum amount of code needed to get the tests to pass',
            'set_id': 21
        },
        {
            'term': 'TDD - refactor ',
            'definition': 'Refactoring the code you wrote that passed the tests, and then you loop back to red.',
            'set_id': 21
        },

    ])

    op.bulk_insert(votes_table, [
        {
            'set_id': 18,  # redux
            'user_id': 1,
            'is_upvote': False
        },
        {
            'set_id': 18,  # redux
            'user_id': 2,
            'is_upvote': False
        },
        {
            'set_id': 18,  # redux
            'user_id': 3,
            'is_upvote': False
        },
        {
            'set_id': 18,  # redux
            'user_id': 4,
            'is_upvote': False
        },
        {
            'set_id': 5,  # redux
            'user_id': 4,
            'is_upvote': True
        },
        {
            'set_id': 5,  # redux
            'user_id': 3,
            'is_upvote': True
        },
        {
            'set_id': 5,  # redux
            'user_id': 2,
            'is_upvote': True
        },
        {
            'set_id': 5,  # redux
            'user_id': 1,
            'is_upvote': True
        },
        {
            'set_id': 1,  # redux
            'user_id': 2,
            'is_upvote': True
        },

    ])

# ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('votes')
    op.drop_table('favorites')
    op.drop_table('cards')
    op.drop_table('sets')
    op.drop_table('users')
    op.drop_table('categories')
    # ### end Alembic commands ###
